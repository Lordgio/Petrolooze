plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'io.gitlab.arturbosch.detekt'
    id 'com.squareup.sqldelight'
    id 'jacoco'
}

jacoco {
    // You may modify the Jacoco version here
    toolVersion = Versions.JACOCO
}

/**
 * The correct path of the report is $rootProjectDir/app/build/reports/jacoco/index.html
 * to run this task use: ./gradlew clean jacocoTestReport
 */
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) { //we use "debug" build type for test coverage (can be other)
    group = "reporting"
    description = "Generate unified Jacoco code coverage report"

    reports {
        xml.enabled = false
        html.enabled = true
        csv.enabled = false
    }

    def fileFilter = [
            '**/*Test*.*',
            '**/AutoValue_*.*',
            '**/*JavascriptBridge.class',
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            'android/**/*.*',
            '**/BuildConfig.*',
            '**/*$ViewBinder*.*',
            '**/*$ViewInjector*.*',
            '**/Lambda$*.class',
            '**/Lambda.class',
            '**/*Lambda.class',
            '**/*Lambda*.class',
            '**/*$InjectAdapter.class',
            '**/*$ModuleAdapter.class',
            '**/*$ViewInjector*.class',
            '**/*_MembersInjector.class',
            '*/*_MembersInjector*.*',
            '**/*_*Factory*.*',
            '*/*Component*.*',
            '**/*Module*.*',
            '**/Dagger*.*',
            '**/*Activity*.*',
            '**/*_NoCoverage.*',
            '**/model/**'
    ]
    def javaDebugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter) //we use "debug" build type for test coverage (can be other)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([javaDebugTree, kotlinDebugTree]) // we need to target both java and kotlin build folder
    executionData.from = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec", //we use "debug" build type for test coverage (can be other)
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName '1.0'

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

sqldelight {
    PetroloozeDB {
        packageName = 'dev.xxxxx.db.impl'
        sourceFolders = ['db']
        schemaOutputDirectory = file('src/main/db/schemas')
    }
}

dependencies {
    // Modules
    implementation project(':db:public')

    // Kotlin
    implementation Kotlin.STDLIB

    // DB
    implementation Other.SQLDELIGHT_COROUTINES

    // Test
    testImplementation Testing.JUNIT
    androidTestImplementation Testing.JUNIT_KTX

    // Test DB implementation
    testImplementation Testing.SQLDELIGHT_TEST_DRIVER
    testImplementation(Testing.SQLDELIGHT_JDBC) {
        // Override the version of sqlite used by sqlite-driver to match Android API 23
        because("This is the version that matches min Sdk API 23")
        force = true
    }
}