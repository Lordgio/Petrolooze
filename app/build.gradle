plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'io.gitlab.arturbosch.detekt'
    id 'dagger.hilt.android.plugin'
    id 'jacoco'
}

jacoco {
    // You may modify the Jacoco version here
    toolVersion = Versions.JACOCO
}

/**
 * The correct path of the report is $rootProjectDir/app/build/reports/jacoco/index.html
 * to run this task use: ./gradlew clean jacocoTestReport
 */
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) { //we use "debug" build type for test coverage (can be other)
    group = "reporting"
    description = "Generate unified Jacoco code coverage report"

    reports {
        xml.enabled = false
        html.enabled = true
        csv.enabled = false
    }

    def fileFilter = [
            '**/*Test*.*',
            '**/AutoValue_*.*',
            '**/*JavascriptBridge.class',
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            'android/**/*.*',
            '**/BuildConfig.*',
            '**/*$ViewBinder*.*',
            '**/*$ViewInjector*.*',
            '**/Lambda$*.class',
            '**/Lambda.class',
            '**/*Lambda.class',
            '**/*Lambda*.class',
            '**/*$InjectAdapter.class',
            '**/*$ModuleAdapter.class',
            '**/*$ViewInjector*.class',
            '**/*_MembersInjector.class',
            '*/*_MembersInjector*.*',
            '**/*_*Factory*.*',
            '*/*Component*.*',
            '**/*Module*.*',
            '**/Dagger*.*',
            '**/*Activity*.*',
            '**/*_NoCoverage.*',
            '**/model/**'
    ]
    def javaDebugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter) //we use "debug" build type for test coverage (can be other)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([javaDebugTree, kotlinDebugTree]) // we need to target both java and kotlin build folder
    executionData.from = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec", //we use "debug" build type for test coverage (can be other)
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "dev.xxxxx.petrolooze"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    packagingOptions {
        exclude 'META-INF/fake.kotlin_module'
        exclude 'META-INF/impl.kotlin_module'
        exclude 'META-INF/public.kotlin_module'
    }
}

dependencies {
    // Public modules
    implementation project(':api:public')
    implementation project(':datasourcefeature1:public')
    implementation project(':db:public')
    implementation project(':domainfeature1:public')
    implementation project(':feature1')

    // Impl modules
    implementation project(':api:impl')
    implementation project(':datasourcefeature1:impl')
    implementation project(':db:impl')
    implementation project(':domainfeature1:impl')

    // Kotlin
    implementation Kotlin.STDLIB

    // Android
    implementation Android.APP_CORE
    implementation Android.APP_COMPAT

    // Hilt
    implementation Other.HILT
    kapt Other.HILT_COMPILER

    // Test
    testImplementation Testing.JUNIT
    androidTestImplementation Testing.JUNIT_KTX
    androidTestImplementation Testing.ESPRESSO
    androidTestImplementation Testing.COMPOSE_TESTS
    androidTestImplementation Testing.HILT_TESTS
    kaptAndroidTest Other.HILT_COMPILER

    // Test modules
    testImplementation project(':api:fake')
    testImplementation project(':datasourcefeature1:fake')
    testImplementation project(':db:fake')
    testImplementation project(':domainfeature1:fake')
}